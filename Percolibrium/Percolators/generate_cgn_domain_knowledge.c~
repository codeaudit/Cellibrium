/*****************************************************************************/
/*                                                                           */
/* File: generate_cgn_domain_knowledge.c                                     */
/*                                                                           */
/* Created: Mon Nov 21 14:10:46 2016                                         */
/*                                                                           */
/*****************************************************************************/

 // Conceptual sketch for convergently updating graph knowledge representation
 // This marries/matches with Narrators/stories-fs.c

 // gcc -o gen_knowledge -g -std=c99 generate_cgn_domain_knowledge.c

 // Usage example: ./gen_knowledge > ExampleTupleData/domain_knowledge_graph

#include <stdlib.h>
#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <utime.h>

typedef int Policy;

#define true 1
#define false 0
#define CGN_BUFSIZE 256
#define MAX_ASSOC_ARRAY 128

// Import standard link definitions

#define GRAPH 1
#include "../../RobIoTs/CGNgine/libpromises/graph.h"
#include "../../RobIoTs/CGNgine/libpromises/graph_defs.c"

/******************************************************************************/

void main()
{
Gr(stdout,"system and human aspects",a_generalizes,"human aspects");
Gr(stdout,"system and human aspects",a_generalizes,"system aspects");

Gr(stdout,"operating system",a_generalizes,"linux");

// These tuples might be generated by a code audit / scanner

Gr(stdout,"CGNgine error messages",a_contains,"Cannot mix CIDR notation with xxx-yyy range notation *");
Gr(stdout,"CGNgine error messages",a_contains,"Not a valid address range - or not a fully qualified name *");
Gr(stdout,"CGNgine error messages",a_contains,"Cannot handle ipv6 masks which are not 8 bit multiples (fix me)");
Gr(stdout,"CGNgine error messages",a_contains,"Mixture of IPv6 and IPv4 addresses");
Gr(stdout,"CGNgine error messages",a_contains,"Cannot mix CIDR notation with xx-yy range notation");
Gr(stdout,"CGNgine error messages",a_contains,"FIPS mode is enabled, and md5 is not an approved algorithm");
Gr(stdout,"CGNgine error messages",a_contains,"process_select body missing its a process_result return value");
Gr(stdout,"CGNgine error messages",a_contains,"bundle_return_value promise for * in bundle * with too many constraints (ignored)");
Gr(stdout,"CGNgine error messages",a_contains,"Unsupported database type * in databases promise");
Gr(stdout,"CGNgine error messages",a_contains,"Neighbour IP address should be a host not be a network address * in BGP interface promise");
Gr(stdout,"CGNgine error messages",a_contains,"Unsupported user policy * in users promise");
Gr(stdout,"CGNgine error messages",a_contains,"Error writing marker file *");
Gr(stdout,"CGNgine error messages",a_contains,"Error removing marker file *");
Gr(stdout,"CGNgine error messages",a_contains,"Inputs path exists at *, but it is not a directory");
Gr(stdout,"CGNgine error messages",a_contains,"Path exists at *, but it is not a regular file");
Gr(stdout,"CGNgine error messages",a_contains,"Failed to decrypt string");
Gr(stdout,"CGNgine error messages",a_contains,"Database * is broken, trying to repair...");
Gr(stdout,"CGNgine error messages",a_contains,"Failed to repair database *, recreating...");
Gr(stdout,"CGNgine error messages",a_contains,"Host class counting is only available in CFEngine Enterprise");
Gr(stdout,"CGNgine error messages",a_contains,"Chop was called on a string that seemed to have no terminator");
Gr(stdout,"CGNgine error messages",a_contains,"Bundle aborted on defined class *");
Gr(stdout,"CGNgine error messages",a_contains,"Setting abort for * when setting *");
Gr(stdout,"CGNgine error messages",a_contains,"Unable to parse class expression *");
Gr(stdout,"CGNgine error messages",a_contains,"Syntax error in expression *");
Gr(stdout,"CGNgine error messages",a_contains,"While persisting class *, error reading existing value");
Gr(stdout,"CGNgine error messages",a_contains,"Argument arity mismatch in body * at line %zu in file *, expected %d, got %d");
Gr(stdout,"CGNgine error messages",a_contains,"Chop was called on a string that seemed to have no terminator");
Gr(stdout,"CGNgine error messages",a_contains,"Bundle aborted on defined class *");
Gr(stdout,"CGNgine error messages",a_contains,"Setting abort for * when setting class *");
Gr(stdout,"CGNgine error messages",a_contains,"The value of variable * contains a reference to itself, *");
Gr(stdout,"CGNgine error messages",a_contains,"An item in list variable * contains a reference to itself");
Gr(stdout,"CGNgine error messages",a_contains,"Variable *' cannot be added because ");
Gr(stdout,"CGNgine error messages",a_contains,"You cannot use reserved hard class * as post-condition class");
Gr(stdout,"CGNgine error messages",a_contains,"You cannot cancel a reserved hard class * in post-condition classes");
Gr(stdout,"CGNgine error messages",a_contains,"Unable to open private log *");
Gr(stdout,"CGNgine error messages",a_contains,"Could not get host entry age");
Gr(stdout,"CGNgine error messages",a_contains,"getusers is not implemented");
Gr(stdout,"CGNgine error messages",a_contains,"FIPS mode is enabled, and md5 is not an approved algorithm");

// Derivatives

Gr(stdout,"Cannot mix CIDR notation with xxx-yyy range notation *", a_related_to,"CIDR");

Gr(stdout,"CIDR",a_related_to,"Classless Internet Domain Routing");
Gr(stdout,"CIDR",a_related_to,"Routing");

Gr(stdout,"Cannot mix CIDR notation with xxx-yyy range notation *", a_caused_by,"network policy");

Gr(stdout,"Cannot mix CIDR notation with xxx-yyy range notation *", a_caused_by,"FuzzySetMatch");
Gr(stdout, "iprange" ,a_depends,"FuzzySetMatch");
Gr(stdout, "iprange" ,a_hasrole,"CGNgine class function");
Gr(stdout, "CGNgine class function",a_contains,"iprange");
Gr(stdout, "system policy", a_contains, "CGNgine class function");
Gr(stdout, "CGNgine functions", a_contains, "CGNgine class function");
Gr(stdout, "CGNgine policy language", a_contains, "CGNgine functions");
Gr(stdout,"network policy",a_contains,"interfaces configuration");

}

/**********************************************************************/

void Gr(FILE *consc,char *from, enum associations assoc, char *to)
{
 fprintf(consc,"(%s,%d,%s,%s,%s)\n",from,A[assoc].type,A[assoc].fwd,to,A[assoc].bwd);
}
